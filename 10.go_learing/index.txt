Go 语⾔言基础
---------------
基本程序结构
常⽤用集合
函数式编程
⾯面向对象编程
错误处理理
模块化及依赖管理理

进阶与实战
---------------
并发编程模式
常⻅见并发任务
深⼊入测试
反射和 Unsafe
常⻅见架构模式的实现
性能调优
⾼高可⽤用性服务设计

=========================================================================================================
lesson3 数据类型
1. Go 语⾔言不不允许隐式类型转换
2. 别名和原有类型也不不能进⾏行行隐式类型转换
3.数字最大值
math.MaxInt64
math.MaxFloat64
math.MaxUint32

4.基本数据类型
bool
string
int(64位系统就是64bit)  int8  int16  int32  int64
uint(64位系统就是64bit) uint8 uint16 uint32 uint64 uintptr
byte // alias for uint8
rune // alias for int32,represents a Unicode code point
float32 float64
complex64 complex128

5.
golang不支持隐式类型转换
golang不支持指针运算
golang 声明的string是空字符串不是nil

6.指针类型:
与其他主要编程语⾔言的差异
6.1. 不⽀持指针运算
6.2. string 是值类型，其默认的初始化值为空字符串串，⽽而不不是 nil
=========================================================================================================
lesson4 运算符
1.比较数组
⽤用 == ⽐比较数组
相同维数且含有相同个数元素的数组才可以⽐比较
每个元素都相同的才相等

2. &^ 按位置零
与其他主要编程语⾔言的差异
左边  右边 结果
1  &^ 0   1
0  &^ 0   0
1  &^ 1   0
0  &^ 1   0
右边只要是0, 左边的的哪一位保持不变
右边只要是1, 左边的的哪一位被清零
=========================================================================================================
lesson5 条件和循环
switch条件 与其他主要编程语⾔言的差异
1.条件表达式不不限制为常量量或者整数;
2.单个 case 中，可以出现多个结果选项, 使⽤用逗号分隔;
3.与 C 语⾔言等规则相反，Go 语⾔言不不需要⽤用break来明确退出⼀一个 case;
4.可以不不设定 switch 之后的条件表达式，在此种情况下，整个 switch 结
构与多个 if...else... 的逻辑作⽤用等同
=========================================================================================================
lesson6 数组和切⽚

1.数组的声明
var a [3]int //声明并初始化为默认零值
a[0] = 1
b := [3]int{1, 2, 3} //声明同时初始化
c := [2][2]int{{1, 2}, {3, 4}} //多维数组初始化

2.数组截取
a[开始索引(包含), 结束索引(不不包含)]
a := [...]int{1, 2, 3, 4, 5}
a[1:2]  //2
a[1:3]  //2,3
a[1:len(a)] //2,3,4,5
a[1:] //2,3,4,5
a[:3] //1,2,3

3.切片的内部结构
struct Slice{
    *ptr --> 实际的数组
    len
    cap
}

4.切⽚片声明
var s0 []int
s0 = append(s0, 1)
s := []int{}
s1 := []int{1, 2, 3}
s2 := make([]int, 2, 4)
/*
[]type, len, cap
其中len个元素会被初始化为默认零值，未初始化元素不可以访问
*/

5.数组 vs. 切⽚片
1.容量量是否可伸缩
2.数组可以比较,分片只能和nil比较

=========================================================================================================
lesson7:Map
1.Map 元素的访问 与其他主要编程语⾔言的差异
在访问的 Key 不不存在时，仍会返回零值，不不能通过返回 nil 来判断元素是否存在
if v, ok := m["four"]; ok {
  t.Log("four", v)
} else {
  t.Log("Not existing")
}

2.map在函数做参数默认是传递的地址
=========================================================================================================
lesson8:Map扩展
=========================================================================================================
lesson9:String
1.字符串串
与其他主要编程语⾔言的差异
1.1. string 是数据类型，不不是引⽤用或指针类型
1.2. string 是只读的 byte slice，len 函数可以它所包含的 byte 数
1.3. string 的 byte 数组可以存放任何数据

2.Unicode UTF8
2.1. Unicode 是⼀一种字符集(code point)
2.2. UTF8 是 unicode 的存储实现 (转换为字节序列列的规则)

3.编码与存储
字符 			“中”
Unicode			0x4E2D
UTF-8			0xE4B8AD
string/[]byte	[0xE4,0xB8,0xAD]
=========================================================================================================
lesson10:函数

1.函数是⼀一等公⺠民
与其他主要编程语⾔言的差异
1.1. 可以有多个返回值
1.2. 所有参数都是值传递:slice，map，channel 会有传引⽤用的错觉
1.3. 函数可以作为变量量的值
1.4. 函数可以作为参数和返回值

=========================================================================================================
lesson11:
封装数据和⾏为
定义交互协议
⾃自定义类型
=========================================================================================================
lesson12:扩展与复⽤
1.复合(组合)
与其他主要编程语⾔言的差异
Go 不⽀持继承，但可以通过复合的方式来复⽤

2.匿名类型嵌⼊
与其他主要编程语⾔的差异
它不是继承，如果我们把“内部 struct ”看作父类，把“外部 struct” 看作子类，
会发现如下问题:
2.1.不⽀持⼦类替换
2.2.子类并不是真正继承了父类的方法

父类的定义的⽅法⽆法访问⼦类的数据和⽅方法
=========================================================================================================
lesson13:多态与空接⼝口
=========================================================================================================
lesson14:panic和recover和exit
exit:不会执行defer的 不打印堆栈信息
panic:执行defer 并且打印堆栈信息
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================